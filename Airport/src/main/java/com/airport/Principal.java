package com.airport;

import Classes.Email;
import Classes.RegexClass;
import Classes.Weather;
import Entities.EAirplane;

import Entities.EFlight;
import Entities.EstatusFlight;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.hssf.usermodel.DVConstraint;
import org.apache.poi.hssf.usermodel.HSSFDataValidation;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddressList;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataValidation;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;

public class Principal extends javax.swing.JFrame {

    private ArrayList<EAirplane> airplanesArrayList;
    private ArrayList<EFlight> flightsArrayList;
    DefaultTableModel tableModelFlights;
    DefaultTableModel tableModelAirplanes;

    public Principal() {
        airplanesArrayList = new ArrayList<EAirplane>();
        airplanesArrayList.add(new EAirplane(0, "Model1", 100, 80.0, true));
        airplanesArrayList.add(new EAirplane(1, "Model2", 200, 120.0, true));
        airplanesArrayList.add(new EAirplane(2, "Model3", 150, 100.0, true));
        airplanesArrayList.add(new EAirplane(3, "Model4", 80, 50.0, false));
        flightsArrayList = new ArrayList<EFlight>();
        flightsArrayList.add(new EFlight(0, "Toronto,Canada", "La libertad,El Salvador", "-", "04/09/2021 15:00", "-",
                "4/09/2021 21:00", "Avianca", "Departure did succesfully! /n Good weather!", EstatusFlight.ACTIVATED.name(), 0));
        flightsArrayList.add(new EFlight(1, "Texas,EE.UU", "La libertad,El Salvador", "-", "05/09/2021 21:00", "-",
                "06/09/2021 1:00", "United Airlines", "Departure did succesfully! \nGood weather!", EstatusFlight.LANDED.name(), 2));
        initComponents();
//        tblInfoMain.addMouseListener(new MouseAdapter() {
//            public void mouseClicked(MouseEvent e) {
//               clickDetailsFlight();
//            }
//        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupAddModify = new javax.swing.ButtonGroup();
        btnGroupAirplanes = new javax.swing.ButtonGroup();
        jMenu1 = new javax.swing.JMenu();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelFlights = new javax.swing.JPanel();
        btnImportDoc = new javax.swing.JButton();
        scrollPaneMain = new javax.swing.JScrollPane();
        tblInfoMain = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtIdSend = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDateSend = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtEmailSend = new javax.swing.JTextField();
        btnSendEmail = new javax.swing.JButton();
        btnDowloadExcel = new javax.swing.JButton();
        panelAddFlights = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtABinnacle = new javax.swing.JTextArea();
        lblFlight = new javax.swing.JLabel();
        lblOrigin = new javax.swing.JLabel();
        lblDestiny = new javax.swing.JLabel();
        lblAirplane = new javax.swing.JLabel();
        lblAirplaneIDFlight = new javax.swing.JLabel();
        txtFlightID = new javax.swing.JTextField();
        txtOrigin = new javax.swing.JTextField();
        txtDestiny = new javax.swing.JTextField();
        lblDepartureTime = new javax.swing.JLabel();
        lblArrivalTime = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        txtDepartureTime = new javax.swing.JTextField();
        txtArrivalTime = new javax.swing.JTextField();
        rBtnLanded = new javax.swing.JRadioButton();
        rBtnActived = new javax.swing.JRadioButton();
        rBtnCancel = new javax.swing.JRadioButton();
        rBtnDelayed = new javax.swing.JRadioButton();
        btnAddFlight = new javax.swing.JButton();
        btnModifyFlight = new javax.swing.JButton();
        jComboAirlines = new javax.swing.JComboBox<>();
        lblArrivalTime1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextExpectedArrivalTime = new javax.swing.JTextField();
        lblArrivalTime2 = new javax.swing.JLabel();
        jTextExpectedDepartureTime = new javax.swing.JTextField();
        jComboAirplane = new javax.swing.JComboBox<>();
        lblArrivalTime3 = new javax.swing.JLabel();
        buttonWatchWeather = new javax.swing.JButton();
        panelAirplanes = new javax.swing.JPanel();
        lblModel = new javax.swing.JLabel();
        lblPassengerCap = new javax.swing.JLabel();
        lblTankCap = new javax.swing.JLabel();
        lblAvailable = new javax.swing.JLabel();
        txtModelAirplane = new javax.swing.JTextField();
        txtTankCap = new javax.swing.JTextField();
        rBtnAvailable = new javax.swing.JRadioButton();
        rBtnNonAvailable = new javax.swing.JRadioButton();
        btnAddAirplane = new javax.swing.JButton();
        btnModifyAirplane = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tAirplanes = new javax.swing.JTable();
        spinnerPassengerCap = new javax.swing.JSpinner();
        lblModel1 = new javax.swing.JLabel();
        txtCodAirplane = new javax.swing.JTextField();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Airport System");

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        btnImportDoc.setText("Import Document");
        btnImportDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportDocActionPerformed(evt);
            }
        });

        tblInfoMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblInfoMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInfoMainMouseClicked(evt);
            }
        });
        scrollPaneMain.setViewportView(tblInfoMain);

        jLabel1.setText("Flight ID:");

        jLabel2.setText("Date:");

        jLabel3.setText("Email:");

        btnSendEmail.setText("Send Email");
        btnSendEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendEmailActionPerformed(evt);
            }
        });

        btnDowloadExcel.setText("Download format");
        btnDowloadExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDowloadExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFlightsLayout = new javax.swing.GroupLayout(panelFlights);
        panelFlights.setLayout(panelFlightsLayout);
        panelFlightsLayout.setHorizontalGroup(
            panelFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFlightsLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(panelFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 645, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelFlightsLayout.createSequentialGroup()
                        .addComponent(btnImportDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDowloadExcel))
                    .addGroup(panelFlightsLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtIdSend, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtDateSend, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelFlightsLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnSendEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtEmailSend))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        panelFlightsLayout.setVerticalGroup(
            panelFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFlightsLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(panelFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImportDoc)
                    .addComponent(btnDowloadExcel))
                .addGap(18, 18, 18)
                .addComponent(scrollPaneMain, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIdSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtDateSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmailSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSendEmail)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Flights", panelFlights);

        panelAddFlights.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        txtABinnacle.setColumns(20);
        txtABinnacle.setRows(5);
        txtABinnacle.setText("Write here the flight binnacle, there you can be very extensive\n\n\nWEATHER (Here you can write the weater information)\n\n\n\n\nINCIDENTS\n\n\n\n\nEXTRA INFORMATION");
        jScrollPane1.setViewportView(txtABinnacle);

        lblFlight.setText("Flight ID:");

        lblOrigin.setText("Origin:");

        lblDestiny.setText("Destiny:");

        lblAirplane.setText("Airline:");

        lblAirplaneIDFlight.setText("Airplane :");

        txtFlightID.setEnabled(false);

        lblDepartureTime.setText("Departure time:");

        lblArrivalTime.setText("Arrival time:");

        lblStatus.setText("Status:");

        btnGroupAddModify.add(rBtnLanded);
        rBtnLanded.setText("Landed");

        btnGroupAddModify.add(rBtnActived);
        rBtnActived.setText("Actived");

        btnGroupAddModify.add(rBtnCancel);
        rBtnCancel.setText("Cancel");

        btnGroupAddModify.add(rBtnDelayed);
        rBtnDelayed.setText("Delayed");

        btnAddFlight.setText("Add");
        btnAddFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFlightActionPerformed(evt);
            }
        });

        btnModifyFlight.setText("Modify");
        btnModifyFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyFlightActionPerformed(evt);
            }
        });

        jComboAirlines.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Avianca", "Delta Airlines", "United Airlines", "American Airlines" }));

        lblArrivalTime1.setText("Real arrival time:");

        jTextField1.setText("jTextField1");

        lblArrivalTime2.setText("Real departure time:");

        lblArrivalTime3.setText("Flight Binnacle:");

        buttonWatchWeather.setText("Watch weather");
        buttonWatchWeather.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonWatchWeatherActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAddFlightsLayout = new javax.swing.GroupLayout(panelAddFlights);
        panelAddFlights.setLayout(panelAddFlightsLayout);
        panelAddFlightsLayout.setHorizontalGroup(
            panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAddFlightsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelAddFlightsLayout.createSequentialGroup()
                        .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(panelAddFlightsLayout.createSequentialGroup()
                                .addComponent(btnAddFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnModifyFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblArrivalTime3)
                                .addGroup(panelAddFlightsLayout.createSequentialGroup()
                                    .addGap(2, 2, 2)
                                    .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblAirplaneIDFlight)
                                        .addComponent(lblAirplane)
                                        .addComponent(lblDestiny)
                                        .addComponent(lblOrigin)
                                        .addComponent(lblFlight))
                                    .addGap(18, 18, 18)
                                    .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jComboAirlines, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtFlightID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                                        .addComponent(txtOrigin, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtDestiny, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jComboAirplane, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAddFlightsLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblArrivalTime)
                                    .addComponent(lblDepartureTime)
                                    .addComponent(lblArrivalTime2)
                                    .addComponent(lblArrivalTime1)
                                    .addComponent(lblStatus))
                                .addGap(31, 31, 31)
                                .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextExpectedArrivalTime)
                                        .addComponent(jTextExpectedDepartureTime)
                                        .addGroup(panelAddFlightsLayout.createSequentialGroup()
                                            .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(rBtnLanded)
                                                .addComponent(rBtnCancel))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                                            .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(rBtnDelayed)
                                                .addComponent(rBtnActived))))
                                    .addComponent(txtDepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddFlightsLayout.createSequentialGroup()
                                .addGap(188, 188, 188)
                                .addComponent(buttonWatchWeather, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        panelAddFlightsLayout.setVerticalGroup(
            panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddFlightsLayout.createSequentialGroup()
                .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddFlightsLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDepartureTime)
                            .addComponent(jTextExpectedDepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAddFlightsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFlightID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFlight))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtOrigin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblOrigin))
                    .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblArrivalTime)
                        .addComponent(jTextExpectedArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDestiny, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDestiny)
                    .addComponent(lblArrivalTime2)
                    .addComponent(txtDepartureTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAirplane)
                    .addComponent(jComboAirlines, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblArrivalTime1)
                    .addComponent(txtArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAirplaneIDFlight)
                    .addComponent(lblStatus)
                    .addComponent(rBtnLanded)
                    .addComponent(rBtnActived)
                    .addComponent(jComboAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rBtnCancel)
                    .addComponent(rBtnDelayed)
                    .addComponent(btnModifyFlight)
                    .addComponent(btnAddFlight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelAddFlightsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblArrivalTime3)
                    .addComponent(buttonWatchWeather))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Add/Modify Flights", panelAddFlights);

        lblModel.setText("Model:");

        lblPassengerCap.setText("Passenger Capacity:");

        lblTankCap.setText("Tank Capacity:");

        lblAvailable.setText("Availability:");

        btnGroupAirplanes.add(rBtnAvailable);
        rBtnAvailable.setSelected(true);
        rBtnAvailable.setText("Available");

        btnGroupAirplanes.add(rBtnNonAvailable);
        rBtnNonAvailable.setText("Non Available");

        btnAddAirplane.setText("Add Airplane");
        btnAddAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAirplaneActionPerformed(evt);
            }
        });

        btnModifyAirplane.setText("Modify");
        btnModifyAirplane.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyAirplaneActionPerformed(evt);
            }
        });

        tAirplanes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tAirplanes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tAirplanesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tAirplanes);

        lblModel1.setText("Airplane ID:");

        txtCodAirplane.setEnabled(false);

        javax.swing.GroupLayout panelAirplanesLayout = new javax.swing.GroupLayout(panelAirplanes);
        panelAirplanes.setLayout(panelAirplanesLayout);
        panelAirplanesLayout.setHorizontalGroup(
            panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelAirplanesLayout.createSequentialGroup()
                .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAirplanesLayout.createSequentialGroup()
                        .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblModel1)
                            .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelAirplanesLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(lblPassengerCap))
                                .addGroup(panelAirplanesLayout.createSequentialGroup()
                                    .addGap(75, 75, 75)
                                    .addComponent(lblModel))))
                        .addGap(28, 28, 28)
                        .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCodAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(spinnerPassengerCap, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                                .addComponent(txtModelAirplane, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 128, Short.MAX_VALUE)
                        .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelAirplanesLayout.createSequentialGroup()
                                .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTankCap, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAvailable, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelAirplanesLayout.createSequentialGroup()
                                        .addComponent(rBtnAvailable)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rBtnNonAvailable))
                                    .addComponent(txtTankCap, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelAirplanesLayout.createSequentialGroup()
                                .addComponent(btnAddAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnModifyAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        panelAirplanesLayout.setVerticalGroup(
            panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAirplanesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModel1)
                    .addComponent(txtCodAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTankCap)
                    .addComponent(txtTankCap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblModel)
                    .addComponent(txtModelAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rBtnAvailable)
                    .addComponent(rBtnNonAvailable))
                .addGap(7, 7, 7)
                .addGroup(panelAirplanesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassengerCap)
                    .addComponent(spinnerPassengerCap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddAirplane)
                    .addComponent(btnModifyAirplane))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Airplanes", panelAirplanes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFlightActionPerformed
        // TODO add your handling code here:
        createFlight();
    }//GEN-LAST:event_btnAddFlightActionPerformed

    private void btnModifyFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyFlightActionPerformed
        // TODO add your handling code here:
        modifyFlight();
    }//GEN-LAST:event_btnModifyFlightActionPerformed

    private void btnAddAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAirplaneActionPerformed
        // TODO add your handling code here:
        createAirplane();
        loadTableAirplanes();
    }//GEN-LAST:event_btnAddAirplaneActionPerformed

    private void btnModifyAirplaneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyAirplaneActionPerformed
        // TODO add your handling code here:
        modifyAirplane();
        loadTableAirplanes();
    }//GEN-LAST:event_btnModifyAirplaneActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        loadTableFlights();
        loadTableAirplanes();
        loadComboAirplanes();
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void tblInfoMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInfoMainMouseClicked
        clickDetailsFlight();
    }//GEN-LAST:event_tblInfoMainMouseClicked

    private void tAirplanesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tAirplanesMouseClicked
        clickDetailsAirplane();
    }//GEN-LAST:event_tAirplanesMouseClicked

    private void btnImportDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportDocActionPerformed
        File excelFile;
        FileInputStream fis = null;
        BufferedInputStream bis = null;
        HSSFWorkbook wb = null;
        Sheet sheet = null;

        String defaultCurrentDirectoryPath = "C:\\Users\\Public\\Desktop";
        JFileChooser excelFileChooser = new JFileChooser(defaultCurrentDirectoryPath);
        int excelChooser = excelFileChooser.showOpenDialog(null);

        if (excelChooser == JFileChooser.APPROVE_OPTION) {

            try {
                excelFile = excelFileChooser.getSelectedFile();
                fis = new FileInputStream(excelFile);
                bis = new BufferedInputStream(fis);

                wb = new HSSFWorkbook(bis);
                sheet = wb.getSheetAt(0);

              //  int idsFlights = flightsArrayList.size();
                for (int row = 1; row <= sheet.getLastRowNum(); row++) {
                    Row rowCol = sheet.getRow(row);

                    Cell AirPlane = rowCol.getCell(0);
                    Cell AirLine = rowCol.getCell(1);
                    Cell Origin = rowCol.getCell(2);
                    Cell Destinity = rowCol.getCell(3);
                    Cell Status = rowCol.getCell(4);
                    
                    EFlight oFlight = new EFlight();
                    oFlight.setIdFlight(flightsArrayList.size());
                    oFlight.setAirplane((int) AirPlane.getNumericCellValue());
                    oFlight.setAirline(AirLine.toString());
                    oFlight.setOrigin(Origin.toString());
                    oFlight.setDestiny(Destinity.toString());
                    oFlight.setStatus((EstatusFlight.valueOf(Status.toString()).name()));
                    flightsArrayList.add(oFlight);
                    loadTableFlights();

                }

            } catch (IOException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnImportDocActionPerformed

    private void btnSendEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendEmailActionPerformed
        // TODO add your handling code here:
        Email sendMail = new Email();
        if (txtDateSend.getText().length() > 0) {
            try {
                sendMail.sendReportbyDate(txtDateSend.getText(), txtEmailSend.getText(), flightsArrayList);
            } catch (ParseException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (txtIdSend.getText().length() > 0) {
            sendMail.sendReportbyId(Integer.parseInt(txtIdSend.getText()), txtEmailSend.getText(), flightsArrayList);
        }
    }//GEN-LAST:event_btnSendEmailActionPerformed

    private void btnDowloadExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDowloadExcelActionPerformed

        try {

            //ubicacion y nombre de archivo excel a descargar
            String filename = "FormatFlights.xls";
            HSSFWorkbook workbook = new HSSFWorkbook();
            HSSFSheet sheet = workbook.createSheet("FormatFlights");

            //encabezado en excel
            HSSFRow rowhead = sheet.createRow((short) 0);
            rowhead.createCell(0).setCellValue("AirPlane");
            rowhead.createCell(1).setCellValue("AirLine");
            rowhead.createCell(2).setCellValue("Origin");
            rowhead.createCell(3).setCellValue("Destinity");
            rowhead.createCell(4).setCellValue("Status");

            //Lista los Ids de los vuelos creados
            CellRangeAddressList listAirplane = new CellRangeAddressList(
                    1, 20, 0, 0);
            String ids[] = new String[airplanesArrayList.size()];
            for (int i = 0; i < airplanesArrayList.size(); i++) {
                ids[i] = Integer.toString(airplanesArrayList.get(i).getIdAirplane());
            }

            DVConstraint airplaneList = DVConstraint.createExplicitListConstraint(
                    ids);
            DataValidation dataValidation1 = new HSSFDataValidation(listAirplane, airplaneList);
            dataValidation1.setSuppressDropDownArrow(false);
            sheet.addValidationData(dataValidation1);

            //----- fin ----
            //Lista las aerolineas Disponibles
            CellRangeAddressList listAirline = new CellRangeAddressList(
                    1, 20, 1, 1);

            DVConstraint airlineList = DVConstraint.createExplicitListConstraint(
                    new String[]{"Avianca", "Delta Airlines", "United Airlines", "American Airlines"});
            DataValidation dataValidation2 = new HSSFDataValidation(listAirline, airlineList);
            dataValidation2.setSuppressDropDownArrow(false);
            sheet.addValidationData(dataValidation2);
            //---fin ----

            //Lista las aerolineas Disponibles
            CellRangeAddressList listStatus = new CellRangeAddressList(
                    1, 20, 4, 4);

            DVConstraint statusList = DVConstraint.createExplicitListConstraint(
                    new String[]{"ACTIVATED", "DELAYED", "LANDED", "CANCEL"});
            DataValidation dataValidation3 = new HSSFDataValidation(listStatus, statusList);
            dataValidation3.setSuppressDropDownArrow(false);
            sheet.addValidationData(dataValidation3);
            //---fin ----

            FileOutputStream fileOut = new FileOutputStream(filename);
            workbook.write(fileOut);
            fileOut.close();
            JOptionPane.showMessageDialog(null, "Excel downloaded successfully!");

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_btnDowloadExcelActionPerformed

    private void buttonWatchWeatherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonWatchWeatherActionPerformed
        Weather.viewWeather("https://weather.com/es-SV/tiempo/hoy/l/13.97,-89.74?par=google");
    }//GEN-LAST:event_buttonWatchWeatherActionPerformed

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    public void createAirplane() {

        EAirplane oAirplane = new EAirplane();

        oAirplane.setAvailable(setAirPlaneStatus());
        oAirplane.setModel(txtModelAirplane.getText());
        oAirplane.setPassengerCapacity((int) spinnerPassengerCap.getValue());
        oAirplane.setIdAirplane(airplanesArrayList.size());
        if (RegexClass.isAValidatedDouble(txtTankCap.getText())) {
            oAirplane.setTankCapacity(Double.parseDouble(txtTankCap.getText()));
            airplanesArrayList.add(oAirplane);
        } else {
            JOptionPane.showMessageDialog(this, "Tank capacity value is incorrect. Write again following the next patter: 0 or 0.0");
        }

    }

    public void modifyAirplane() {

        EAirplane oAirplaneModified = new EAirplane();
        oAirplaneModified.setIdAirplane(Integer.parseInt(txtCodAirplane.getText()));
        oAirplaneModified.setAvailable(setAirPlaneStatus());
        oAirplaneModified.setModel(txtModelAirplane.getText());
        oAirplaneModified.setPassengerCapacity((int) spinnerPassengerCap.getValue());
        if (RegexClass.isAValidatedDouble(txtTankCap.getText())) {
            oAirplaneModified.setTankCapacity(Double.parseDouble(txtTankCap.getText()));
            airplanesArrayList.set(oAirplaneModified.getIdAirplane(), oAirplaneModified);
        } else {
            JOptionPane.showMessageDialog(this, "Tank capacity value is incorrect. Write again following the next patter: 0 or 0.0");
        }

    }

//    public EAirplane createObjectAirplane(){
//        EAirplane oAirplane = new EAirplane();
//        oAirplane.setIdAirplane(Integer.parseInt(txtCodAirplane.getText()));
//        oAirplane.setAvailable(setAirPlaneStatus());
//        oAirplane.setModel(txtModelAirplane.getText());
//        oAirplane.setPassengerCapacity((int) spinnerPassengerCap.getValue());
//        if (RegexClass.isAValidatedDouble(txtTankCap.getText())) {
//            oAirplane.setTankCapacity(Double.parseDouble(txtTankCap.getText()));
//            return oAirplane;
//            } else {
//            JOptionPane.showMessageDialog(this, "Tank capacity value is incorrect. Write again following the next patter: 0 or 0.0");
//            return null;
//        }
//        
//    }
    public void createFlight() {

        EFlight oFlight = new EFlight();
        if (!txtOrigin.getText().isEmpty() && !txtDestiny.getText().isEmpty()) {
            if (RegexClass.isAValidatedDate(jTextExpectedDepartureTime.getText()) && RegexClass.isAValidatedDate(jTextExpectedArrivalTime.getText())) {
                oFlight.setIdFlight(flightsArrayList.size());
                oFlight.setOrigin(txtOrigin.getText());
                oFlight.setDestiny(txtDestiny.getText());
                oFlight.setDepartureTime(txtDepartureTime.getText());
                oFlight.setArrivalTime(txtArrivalTime.getText());
                oFlight.setExpectedDepartureTime(jTextExpectedDepartureTime.getText());
                oFlight.setExpectedArrivalTime(jTextExpectedArrivalTime.getText());
                oFlight.setAirline(jComboAirlines.getSelectedItem().toString());
                oFlight.setBinnacle(txtABinnacle.getText());
                oFlight.setStatus(setFlightStatus());
                if (airplanesArrayList.get(jComboAirplane.getSelectedIndex()).isAvailable()) {
                    oFlight.setAirplane(jComboAirplane.getSelectedIndex());
                    flightsArrayList.add(oFlight);
                    JOptionPane.showMessageDialog(this, "Flight created succesfully!");
                } else {
                    JOptionPane.showMessageDialog(this, "The airplane selected is not available!");

                }

            } else {
                JOptionPane.showMessageDialog(this, "Dates are incorrect. Write them again following the next format: dd/mm/yyyy hh:mm or dd-mm-yyyy hh:mm");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Need complete whole the fields.");

        }

    }

    public void modifyFlight() {

        EFlight oFlighModified = flightsArrayList.get(Integer.parseInt(txtFlightID.getText()));

        if (!txtOrigin.getText().isEmpty() && !txtDestiny.getText().isEmpty()) {

            if (RegexClass.isAValidatedDate(jTextExpectedDepartureTime.getText()) && RegexClass.isAValidatedDate(jTextExpectedArrivalTime.getText())) {
                oFlighModified.setOrigin(txtOrigin.getText());
                oFlighModified.setDestiny(txtDestiny.getText());
                oFlighModified.setDepartureTime(txtDepartureTime.getText());
                oFlighModified.setArrivalTime(txtArrivalTime.getText());
                oFlighModified.setExpectedDepartureTime(jTextExpectedDepartureTime.getText());
                oFlighModified.setExpectedArrivalTime(jTextExpectedArrivalTime.getText());
                oFlighModified.setAirline(jComboAirlines.getSelectedItem().toString());
                oFlighModified.setBinnacle(txtABinnacle.getText());
                oFlighModified.setStatus(setFlightStatus());
                if (airplanesArrayList.get(jComboAirplane.getSelectedIndex()).isAvailable()) {
                    oFlighModified.setAirplane(jComboAirplane.getSelectedIndex());
                    flightsArrayList.set(Integer.parseInt(txtFlightID.getText()), oFlighModified);
                } else {
                    JOptionPane.showMessageDialog(this, "The airplane selected is not available!");

                }
            } else {
                JOptionPane.showMessageDialog(this, "Dates are incorrect. Write them again following the next format: dd/mm/yyyy hh:mm or dd-mm-yyyy hh:mm");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Need complete whole the fields.");

        }
    }

    public void loadTableFlights() {
        tableModelFlights = new DefaultTableModel();
        tableModelFlights.addColumn("Flight");
        tableModelFlights.addColumn("Airplane");
        tableModelFlights.addColumn("Airline");
        tableModelFlights.addColumn("Origin");
        tableModelFlights.addColumn("Destinity");
        tableModelFlights.addColumn("Status");
        tableModelFlights.addColumn("");

        if (flightsArrayList.size() > 0) {
            for (EFlight flight : flightsArrayList) {
                tableModelFlights.addRow(new Object[]{
                    flight.getIdFlight(),
                    flight.getAirplane(),
                    flight.getAirline(),
                    flight.getOrigin(),
                    flight.getDestiny(),
                    flight.getStatus(), "Details"});

            }

        }
        tblInfoMain.setModel(tableModelFlights);
    }

    public void loadTableAirplanes() {
        tableModelAirplanes = new DefaultTableModel();

        tableModelAirplanes.addColumn("Airplane");
        tableModelAirplanes.addColumn("Model");
        tableModelAirplanes.addColumn("Tank Capacity");
        tableModelAirplanes.addColumn("Passenger Capacity");
        tableModelAirplanes.addColumn("Availability");
        tableModelAirplanes.addColumn("");
        if (airplanesArrayList.size() > 0) {

            for (EAirplane airplane : airplanesArrayList) {

                String status = "Available";
                if (!airplane.isAvailable()) {
                    status = "Not available";
                }

                tableModelAirplanes.addRow(new Object[]{
                    airplane.getIdAirplane(),
                    airplane.getModel(),
                    airplane.getTankCapacity(),
                    airplane.getPassengerCapacity(),
                    status,
                    "Details"});

            }

        }
        tAirplanes.setModel(tableModelAirplanes);

    }

    public void clickDetailsFlight() {
        if (tblInfoMain.getSelectedColumn() == 6) {
            int rowSelected = tblInfoMain.getSelectedRow();

            txtFlightID.setText(String.valueOf(flightsArrayList.get(rowSelected).getIdFlight()));
            txtOrigin.setText(flightsArrayList.get(rowSelected).getOrigin());
            txtDestiny.setText(flightsArrayList.get(rowSelected).getDestiny());
            jComboAirlines.setSelectedItem(flightsArrayList.get(rowSelected).getAirline());
            jComboAirplane.setSelectedIndex(flightsArrayList.get(rowSelected).getAirplane());
            txtDepartureTime.setText(String.valueOf(flightsArrayList.get(rowSelected).getDepartureTime()));
            txtArrivalTime.setText(String.valueOf(flightsArrayList.get(rowSelected).getArrivalTime()));
            jTextExpectedDepartureTime.setText(String.valueOf(flightsArrayList.get(rowSelected).getExpectedDepartureTime()));
            jTextExpectedArrivalTime.setText(String.valueOf(flightsArrayList.get(rowSelected).getExpectedArrivalTime()));
            getFlightStatus(rowSelected);
            txtABinnacle.setText(flightsArrayList.get(rowSelected).getBinnacle());

        }
    }

    public void clickDetailsAirplane() {
        if (tAirplanes.getSelectedColumn() == 5) {
            int rowSelected = tAirplanes.getSelectedRow();
            txtCodAirplane.setText(String.valueOf(airplanesArrayList.get(rowSelected).getIdAirplane()));
            txtModelAirplane.setText(String.valueOf(airplanesArrayList.get(rowSelected).getModel()));
            spinnerPassengerCap.setValue(airplanesArrayList.get(rowSelected).getPassengerCapacity());
            txtTankCap.setText(String.valueOf(airplanesArrayList.get(rowSelected).getTankCapacity()));

            if (airplanesArrayList.get(rowSelected).isAvailable()) {
                rBtnAvailable.setSelected(true);
            } else {
                rBtnNonAvailable.setSelected(true);
            }

        }
    }

    public String setFlightStatus() {
        String status = EstatusFlight.UNINITIATED.name();
        if (rBtnActived.isSelected()) {
            status = EstatusFlight.ACTIVATED.name();
        } else if (rBtnCancel.isSelected()) {
            status = EstatusFlight.CANCEL.name();
        } else if (rBtnDelayed.isSelected()) {
            status = EstatusFlight.DELAYED.name();
        } else if (rBtnLanded.isSelected()) {
            status = EstatusFlight.LANDED.name();
        }
        return status;
    }

    public String getFlightStatus(int rowSelected) {
        String status = flightsArrayList.get(rowSelected).getStatus();
        if (status == EstatusFlight.ACTIVATED.name()) {
            rBtnActived.setSelected(true);
        } else if (status == EstatusFlight.CANCEL.name()) {
            rBtnCancel.setSelected(true);
        } else if (status == EstatusFlight.DELAYED.name()) {
            rBtnDelayed.setSelected(true);
        } else if (status == EstatusFlight.LANDED.name()) {
            rBtnLanded.setSelected(true);;
        }
        return status;
    }

    public void loadComboAirplanes() {
        jComboAirplane.removeAllItems();
        for (EAirplane plane : airplanesArrayList) {
            jComboAirplane.addItem(plane.getIdAirplane() + " - " + plane.getModel());
        }
    }

    public boolean setAirPlaneStatus() {
        boolean a = true;
        if (rBtnAvailable.isSelected()) {
            a = true;
        } else if (rBtnNonAvailable.isSelected()) {
            a = false;
        }
        return a;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAirplane;
    private javax.swing.JButton btnAddFlight;
    private javax.swing.JButton btnDowloadExcel;
    private javax.swing.ButtonGroup btnGroupAddModify;
    private javax.swing.ButtonGroup btnGroupAirplanes;
    private javax.swing.JButton btnImportDoc;
    private javax.swing.JButton btnModifyAirplane;
    private javax.swing.JButton btnModifyFlight;
    private javax.swing.JButton btnSendEmail;
    private javax.swing.JButton buttonWatchWeather;
    private javax.swing.JComboBox<String> jComboAirlines;
    private javax.swing.JComboBox<String> jComboAirplane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextExpectedArrivalTime;
    private javax.swing.JTextField jTextExpectedDepartureTime;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lblAirplane;
    private javax.swing.JLabel lblAirplaneIDFlight;
    private javax.swing.JLabel lblArrivalTime;
    private javax.swing.JLabel lblArrivalTime1;
    private javax.swing.JLabel lblArrivalTime2;
    private javax.swing.JLabel lblArrivalTime3;
    private javax.swing.JLabel lblAvailable;
    private javax.swing.JLabel lblDepartureTime;
    private javax.swing.JLabel lblDestiny;
    private javax.swing.JLabel lblFlight;
    private javax.swing.JLabel lblModel;
    private javax.swing.JLabel lblModel1;
    private javax.swing.JLabel lblOrigin;
    private javax.swing.JLabel lblPassengerCap;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTankCap;
    private javax.swing.JPanel panelAddFlights;
    private javax.swing.JPanel panelAirplanes;
    private javax.swing.JPanel panelFlights;
    private javax.swing.JRadioButton rBtnActived;
    private javax.swing.JRadioButton rBtnAvailable;
    private javax.swing.JRadioButton rBtnCancel;
    private javax.swing.JRadioButton rBtnDelayed;
    private javax.swing.JRadioButton rBtnLanded;
    private javax.swing.JRadioButton rBtnNonAvailable;
    private javax.swing.JScrollPane scrollPaneMain;
    private javax.swing.JSpinner spinnerPassengerCap;
    private javax.swing.JTable tAirplanes;
    private javax.swing.JTable tblInfoMain;
    private javax.swing.JTextArea txtABinnacle;
    private javax.swing.JTextField txtArrivalTime;
    private javax.swing.JTextField txtCodAirplane;
    private javax.swing.JTextField txtDateSend;
    private javax.swing.JTextField txtDepartureTime;
    private javax.swing.JTextField txtDestiny;
    private javax.swing.JTextField txtEmailSend;
    private javax.swing.JTextField txtFlightID;
    private javax.swing.JTextField txtIdSend;
    private javax.swing.JTextField txtModelAirplane;
    private javax.swing.JTextField txtOrigin;
    private javax.swing.JTextField txtTankCap;
    // End of variables declaration//GEN-END:variables
}
